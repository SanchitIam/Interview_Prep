package graphs;

public class MalwareSpread {

	public int find(HashMap<Integer, Integer> map, int child) {
		if (map.get(child) == child)
			return child;
		int rv = find(map, map.get(child));
		map.put(child, rv);
		return rv;
	}

	public void union(HashMap<Integer, Integer> map, int v1, int v2) {
		if (!map.containsKey(v1)) {
			map.put(v1, v1);
		}

		if (!map.containsKey(v2)) {
			map.put(v2, v2);
		}

		int p1 = find(map, v1);
		int p2 = find(map, v2);

		if (p1 != p2) {
			// merge(map , p1 , p2);
			map.put(p1, p2);
		}
	}

	public int minMalwareSpread(int[][] graph, int[] initial) {
		HashMap<Integer, Integer> map = new HashMap<>();

		for (int i = 0; i < graph.length; ++i) {
			for (int j = 0; j < graph.length; ++j) {
				union(map, i, j);
			}
		}

		HashMap<Integer, Integer> size_map = new HashMap<>();

		for (int i = 0; i < graph.length; ++i) {
			int parent = find(map, i);
			size_map.put(parent, size_map.getOrDefault(parent, 0) + 1);
		}

		HashMap<Integer, Integer> parentVsmalware = new HashMap<>();
		for (int mal : initial) {
			int parent = find(map, mal);
			parentVsmalware.put(parent, parentVsmalware.getOrDefault(parent, 0) + 1);
		}
		int max_size = 0;
		for (int cand : parentVsmalware.keySet()) {
			if (parentVsmalware.get(cand) == 1) {
				max_size = Math.max(max_size, size_map.get(cand));
			}
		}

		for (int ini : initial) {
			int parent = find(map, ini);
			if (size_map.get(parent) == max_size && parentVsmalware.get(parent) == 1)
				return ini;

		}

		return initial[0];

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
